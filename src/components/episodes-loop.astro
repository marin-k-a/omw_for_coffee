---
import { getCollection } from "astro:content";
import { generateSlug } from "../utils/slugHelper";
import parse from 'html-react-parser';
import { decode } from 'html-entities';

// Fetch all podcast episodes
const allEpisodes = await getCollection("podcasts");

const { count } = Astro.props;

// Slice the episodes if a count is provided
const episodesLoop = allEpisodes.slice(0, count).map((episode) => {
  return {
    ...(episode.data || {}),
    link: `/episodes/${generateSlug(episode.data.link, episode.data.title, episode.id)}`,
  };
});

---

<div class="episode-list">
  {episodesLoop.map((episode) => {
    return (
      <div
        class="relative border border-transparent border-dashed cursor-pointer p-7 group rounded-2xl"
        onclick={`location.href = '${episode.link}'`}
      >
        <div class="absolute inset-0 z-20 w-full h-full duration-300 ease-out bg-white border border-dashed dark:bg-neutral-950 rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:-translate-x-1 group-hover:-translate-y-1" />
        <div class="absolute inset-0 z-10 w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:translate-x-1 group-hover:translate-y-1" />
        <div class="relative z-30 duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
          <div class="mt-2.5 text-xs font-medium text-neutral-800 dark:text-neutral-300 text-left">
            {new Date(episode.pubdate || "").toLocaleDateString('uk-UA', {
              day: '2-digit',
              month: 'long', 
              year: 'numeric',
            })}
          </div>
          <h2 class="flex items-center mb-3">
            <a
              href={episode.link}
              class="text-xl font-bold leading-tight tracking-tight sm:text-2xl dark:text-neutral-100"
            >
              {episode.title}
            </a>
            <svg
              class="group-hover:translate-x-0 flex-shrink-0 translate-y-0.5 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200  transform"
              viewBox="0 0 13 15"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
              xmlns:xlink="http://www.w3.org/1999/xlink"
            >
              <g
                stroke="none"
                stroke-width="1"
                fill="none"
                fill-rule="evenodd"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <g
                  id="svg"
                  transform="translate(0.666667, 2.333333)"
                  stroke="currentColor"
                  stroke-width="2.4"
                >
                  <g>
                    <>
                      <polyline
                        class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100"
                        points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                      />
                      <line
                        class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0"
                        x1="10.8333333"
                        y1="5.5"
                        x2="0.833333333"
                        y2="5.16666667"
                      />
                    </>
                  </g>
                </g>
              </g>
            </svg>
          </h2>

          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            {episode.description || ""}
          </p>
          
        </div>
      </div>
    );
  })}
</div>

<style>
  .episode-list {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: 1.5rem;
    padding: 0;
    margin: 0;
    list-style: none;
  }

  .episode-item {
    flex: 1 1 100%; /* Take full width on mobile */
    max-width: 100%;
    padding: 1.5rem;
    background-color: #f9f9f9;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
  }

  .episode-item:hover {
    transform: translateY(-5px);
  }

  .episode-link {
    text-decoration: none;
    color: inherit;
  }

  .episode-link h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .episode-link p {
    font-size: 1rem;
    color: #555;
    margin-bottom: 1rem;
  }

  @media (min-width: 768px) {
    /* On tablets and larger, make blocks take up half the screen */
    .episode-item {
      flex: 1 1 calc(50% - 1.5rem); /* Take 50% of width minus gap */
    }
  }

  @media (min-width: 1024px) {
    /* On larger screens, make blocks take up one-third */
    .episode-item {
      flex: 1 1 calc(33.333% - 1.5rem); /* Take 1/3 of width minus gap */
    }
  }
</style>
