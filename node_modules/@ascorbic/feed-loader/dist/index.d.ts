import { Loader } from 'astro/loaders';
import { z } from 'astro/zod';

interface FeedLoaderOptions {
    /** URL of the feed */
    url: URL | string;
    /** Extra options passed to the fetch request */
    requestOptions?: RequestInit;
}
declare function feedLoader({ url, requestOptions, }: FeedLoaderOptions): Loader;

declare const NSSchema: z.ZodRecord<z.ZodString, z.ZodString>;
declare const ImageSchema: z.ZodObject<{
    url: z.ZodOptional<z.ZodString>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url?: string | undefined;
    title?: string | undefined;
}, {
    url?: string | undefined;
    title?: string | undefined;
}>;
declare const MetaSchema: z.ZodObject<{
    "#ns": z.ZodArray<z.ZodRecord<z.ZodString, z.ZodString>, "many">;
    "#type": z.ZodEnum<["atom", "rss", "rdf"]>;
    "#version": z.ZodString;
    title: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    date: z.ZodNullable<z.ZodDate>;
    pubdate: z.ZodNullable<z.ZodDate>;
    link: z.ZodNullable<z.ZodString>;
    xmlurl: z.ZodNullable<z.ZodString>;
    author: z.ZodNullable<z.ZodString>;
    language: z.ZodNullable<z.ZodString>;
    image: z.ZodNullable<z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        title?: string | undefined;
    }, {
        url?: string | undefined;
        title?: string | undefined;
    }>>;
    favicon: z.ZodNullable<z.ZodString>;
    copyright: z.ZodNullable<z.ZodString>;
    generator: z.ZodNullable<z.ZodString>;
    categories: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    title: string;
    "#ns": Record<string, string>[];
    date: Date | null;
    "#type": "atom" | "rss" | "rdf";
    "#version": string;
    description: string | null;
    pubdate: Date | null;
    link: string | null;
    xmlurl: string | null;
    author: string | null;
    language: string | null;
    image: {
        url?: string | undefined;
        title?: string | undefined;
    } | null;
    favicon: string | null;
    copyright: string | null;
    generator: string | null;
    categories: string[];
}, {
    title: string;
    "#ns": Record<string, string>[];
    date: Date | null;
    "#type": "atom" | "rss" | "rdf";
    "#version": string;
    description: string | null;
    pubdate: Date | null;
    link: string | null;
    xmlurl: string | null;
    author: string | null;
    language: string | null;
    image: {
        url?: string | undefined;
        title?: string | undefined;
    } | null;
    favicon: string | null;
    copyright: string | null;
    generator: string | null;
    categories: string[];
}>;
declare const EnclosureSchema: z.ZodObject<{
    length: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    length?: string | undefined;
    type?: string | undefined;
}, {
    url: string;
    length?: string | undefined;
    type?: string | undefined;
}>;
declare const ItemSchema: z.ZodObject<{
    title: z.ZodNullable<z.ZodString>;
    description: z.ZodNullable<z.ZodString>;
    summary: z.ZodNullable<z.ZodString>;
    date: z.ZodNullable<z.ZodDate>;
    pubdate: z.ZodNullable<z.ZodDate>;
    link: z.ZodNullable<z.ZodString>;
    origlink: z.ZodNullable<z.ZodString>;
    author: z.ZodNullable<z.ZodString>;
    guid: z.ZodString;
    comments: z.ZodNullable<z.ZodString>;
    image: z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        title?: string | undefined;
    }, {
        url?: string | undefined;
        title?: string | undefined;
    }>;
    categories: z.ZodArray<z.ZodString, "many">;
    enclosures: z.ZodArray<z.ZodObject<{
        length: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        length?: string | undefined;
        type?: string | undefined;
    }, {
        url: string;
        length?: string | undefined;
        type?: string | undefined;
    }>, "many">;
    meta: z.ZodObject<{
        "#ns": z.ZodArray<z.ZodRecord<z.ZodString, z.ZodString>, "many">;
        "#type": z.ZodEnum<["atom", "rss", "rdf"]>;
        "#version": z.ZodString;
        title: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        date: z.ZodNullable<z.ZodDate>;
        pubdate: z.ZodNullable<z.ZodDate>;
        link: z.ZodNullable<z.ZodString>;
        xmlurl: z.ZodNullable<z.ZodString>;
        author: z.ZodNullable<z.ZodString>;
        language: z.ZodNullable<z.ZodString>;
        image: z.ZodNullable<z.ZodObject<{
            url: z.ZodOptional<z.ZodString>;
            title: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            url?: string | undefined;
            title?: string | undefined;
        }, {
            url?: string | undefined;
            title?: string | undefined;
        }>>;
        favicon: z.ZodNullable<z.ZodString>;
        copyright: z.ZodNullable<z.ZodString>;
        generator: z.ZodNullable<z.ZodString>;
        categories: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        title: string;
        "#ns": Record<string, string>[];
        date: Date | null;
        "#type": "atom" | "rss" | "rdf";
        "#version": string;
        description: string | null;
        pubdate: Date | null;
        link: string | null;
        xmlurl: string | null;
        author: string | null;
        language: string | null;
        image: {
            url?: string | undefined;
            title?: string | undefined;
        } | null;
        favicon: string | null;
        copyright: string | null;
        generator: string | null;
        categories: string[];
    }, {
        title: string;
        "#ns": Record<string, string>[];
        date: Date | null;
        "#type": "atom" | "rss" | "rdf";
        "#version": string;
        description: string | null;
        pubdate: Date | null;
        link: string | null;
        xmlurl: string | null;
        author: string | null;
        language: string | null;
        image: {
            url?: string | undefined;
            title?: string | undefined;
        } | null;
        favicon: string | null;
        copyright: string | null;
        generator: string | null;
        categories: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    title: string | null;
    date: Date | null;
    description: string | null;
    pubdate: Date | null;
    link: string | null;
    author: string | null;
    image: {
        url?: string | undefined;
        title?: string | undefined;
    };
    categories: string[];
    summary: string | null;
    origlink: string | null;
    guid: string;
    comments: string | null;
    enclosures: {
        url: string;
        length?: string | undefined;
        type?: string | undefined;
    }[];
    meta: {
        title: string;
        "#ns": Record<string, string>[];
        date: Date | null;
        "#type": "atom" | "rss" | "rdf";
        "#version": string;
        description: string | null;
        pubdate: Date | null;
        link: string | null;
        xmlurl: string | null;
        author: string | null;
        language: string | null;
        image: {
            url?: string | undefined;
            title?: string | undefined;
        } | null;
        favicon: string | null;
        copyright: string | null;
        generator: string | null;
        categories: string[];
    };
}, {
    title: string | null;
    date: Date | null;
    description: string | null;
    pubdate: Date | null;
    link: string | null;
    author: string | null;
    image: {
        url?: string | undefined;
        title?: string | undefined;
    };
    categories: string[];
    summary: string | null;
    origlink: string | null;
    guid: string;
    comments: string | null;
    enclosures: {
        url: string;
        length?: string | undefined;
        type?: string | undefined;
    }[];
    meta: {
        title: string;
        "#ns": Record<string, string>[];
        date: Date | null;
        "#type": "atom" | "rss" | "rdf";
        "#version": string;
        description: string | null;
        pubdate: Date | null;
        link: string | null;
        xmlurl: string | null;
        author: string | null;
        language: string | null;
        image: {
            url?: string | undefined;
            title?: string | undefined;
        } | null;
        favicon: string | null;
        copyright: string | null;
        generator: string | null;
        categories: string[];
    };
}>;
type Simplify<T> = {
    [P in keyof T]: T[P];
};
type NS = z.infer<typeof NSSchema>;
type Image = z.infer<typeof ImageSchema>;
type Meta = z.infer<typeof MetaSchema>;
type Enclosure = z.infer<typeof EnclosureSchema>;
type Item = Simplify<z.infer<typeof ItemSchema> & {
    [key: string]: unknown;
}>;

export { type Enclosure, type Image, type Item, type Meta, type NS, feedLoader };
